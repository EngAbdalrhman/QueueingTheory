	
	
	public int getNumberOfCustomers(int t) {
		reset();
		checkSteady(t);
		// transient
		if(t<lamda)
			numberOfCustomers = 0;
		 else if(steadyState)
			 numberOfCustomers = capacity - 1; // could be -2
		 else
			 numberOfCustomers =(int) (lamda * t) - (int) ((mu * t - mu/lamda)+0.001);
		return numberOfCustomers;
	}
	
	public int getTimeOfCustomer(int n) 
	{ // fix not number in the system --> use customer not num of customer
		//int t = (int)((n - (this.getMu()/this.getLamda()))/(this.getLamda()-this.getMu()));
		int t = 0;
		
			while(n != customers)
			{
				t +=arrivalTime; 
				customers++;
			}
			if(getNumberOfCustomers(t)==(getCapacity()-1) && t >= getTi() && !checkEmpty(t)) //TODO handle if someone out of the system
			{
				// n(t) = k-1
				block=true;
			}
			else 
				block=false;
		
		return t;
	}
	public int getWaitingTime(int n) {
		reset();
		int t = getTimeOfCustomer(n);
		checkSteady(t);
		// transient
		
		 if(steadyState)
			 waitingTime = (int) ((serviceTime-arrivalTime) * (lamda * ti - 2)); // TODO could be -2
		 else 
			 waitingTime = (int) (serviceTime-arrivalTime) * (n-1);
		 if(block)
			 return -1;
		return waitingTime;
	}
	
	public void checkSteady(int t) 
	{
		// t >= ti
		if(t>=ti)
			steadyState = true;
		// n >= lamda * ti ?
	}
	public void reset() 
	{
		customers = 0;
		block = false;
		transientState = false; // transientState = !steadyState;
		steadyState = false;
		
	}
	public boolean checkEmpty(int t) {

		if((t-(int)arrivalTime)%serviceTime == 0 && (t != (int)arrivalTime))
			isEmpty = true;
		else isEmpty=false;
		return isEmpty;
	}
	public void Service(int t) {
		
		for (int i = (int) arrivalTime; i <= t; i+=arrivalTime) { // TODO start point
			queue++;
			if(checkEmpty(i))
			{
				queue--;
			}
		}
		// int n = getNumberOfCustomers(t); // n = queue
	}
	
	
	public int calcTi (){
		System.out.println("@ calcTi");
		this.setTi((int)((this.getCapacity() - (this.getMu()/this.getLamda()))/(this.getLamda()-this.getMu())));
		System.out.println("Ti @ frist itiration = "+this.getTi());
		this.setTi(calculateTiMin());
		//this.flagState.setTransState(); // make flags
		return this.getTi();
	 }
   public int calculateTiMin (){
        System.out.println("@ calculateTiMin");
        while (this.getNumberOfCustomers(this.getTi()) > (this.getCapacity()-1)){
            System.out.println(this.getNumberOfCustomers(this.getTi()));
            this.setTi((int)(this.getTi()-(1/this.getLamda())));
            System.out.println("Ti @ Min itiration = "+this.getTi());
        }
        return (int)(getTi()+(1/this.getLamda()));
    }
    
    
    FirstCase fc;
	SecoundCase sc;